// Generated by CoffeeScript 1.4.0
var Document, Element, html;

global.assert = require('chai').assert;
global.sinon = require('sinon');

/*
  DOM stub (almost). Would be better to not have a mock, but Google Closure
  depends on DOM. For example, dom_.removeNode needs parentNode.
  Instead of complicated, always reimplemented stubs, we implemented several DOM methods.
  It's all about moving complexity from tests to shared (this file) DOM implementation.
  http://martinfowler.com/articles/mocksArentStubs.html
*/


Element = (function() {

  function Element(tag) {
    this.tagName = tag.toUpperCase();
    this.style = {
      opacity: 1
    };
    this.__style = {};
    this.childNodes = [];
  }

  Element.prototype.offsetWidth = 0;

  Element.prototype.offsetHeight = 0;

  Element.prototype.nodeType = 1;

  Element.prototype.className = '';

  Element.prototype.parentNode = null;

  Element.prototype.appendChild = function(node) {
    this.childNodes.push(node);
    node.parentNode = this;
    this.firstChild = this.childNodes[0];
    this.lastChild = this.childNodes[this.childNodes.length - 1];
    return node;
  };

  Element.prototype.removeChild = function(node) {
    var idx;
    idx = this.childNodes.indexOf(node);
    this.childNodes.splice(idx, 1);
    node.parentNode = null;
    this.firstChild = this.childNodes[0];
    this.lastChild = this.childNodes[this.childNodes.length - 1];
    return node;
  };

  Element.prototype.insertBefore = function(newElement, referenceElement) {
    var idx;
    idx = this.childNodes.indexOf(referenceElement);
    this.childNodes.splice(idx, 0, newElement);
    newElement.parentNode = this;
    this.firstChild = this.childNodes[0];
    this.lastChild = this.childNodes[this.childNodes.length - 1];
    return newElement;
  };

  Element.prototype.addEventListener = function() {};

  Element.prototype.querySelector = function() {};

  Element.prototype.querySelectorAll = function() {};

  Element.prototype.focus = function() {};

  Element.prototype.setAttribute = function() {};

  Element.prototype.removeAttribute = function() {};

  return Element;

})();

Document = (function() {

  function Document() {}

  Document.prototype.createElement = function(tag) {
    var el;
    el = new Element(tag);
    el.ownerDocument = this;
    return el;
  };

  Document.prototype.querySelector = function() {};

  Document.prototype.querySelectorAll = function() {};

  Document.prototype.addEventListener = function() {};

  Document.prototype.elementFromPoint = function() {};

  Document.prototype.defaultView = {
    getComputedStyle: function(element) {
      var k, style, v, _ref;
      element.__style = element.__style || {};
      style = {
        paddingLeft: 0,
        paddingRight: 0,
        paddingTop: 0,
        paddingBottom: 0,
        marginLeft: 0,
        marginRight: 0,
        marginTop: 0,
        marginBottom: 0,
        borderLeftWidth: 0,
        borderRightWidth: 0,
        borderTopWidth: 0,
        borderBottomWidth: 0,
        getPropertyValue: function() {
          return 0;
        }
      };
      _ref = element.__style;
      for (k in _ref) {
        v = _ref[k];
        style[k] = v;
      }
      return style;
    }
  };

  return Document;

})();

global.createMockDocument = function() {
  return new Document();
};

global.document = global.createMockDocument();

global.location = {};

global.navigator = {};

global.window = {
  addEventListener: function() {},
  scrollTo: function() {},
  document: global.document,
  location: global.location,
  navigator: global.navigator
};

html = global.document.documentElement = global.document.createElement('html');

global.document.body = html.appendChild(global.document.createElement('body'));
